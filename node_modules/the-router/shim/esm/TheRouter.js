'use strict';

import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import c from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { BrowserRouter, HashRouter, Router as AbstractRouter, StaticRouter } from 'react-router-dom';
import { htmlAttributesFor } from 'the-component-util';
/**
 * Router of the-components
 */

var TheRouter =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TheRouter, _React$Component);

  function TheRouter() {
    _classCallCheck(this, TheRouter);

    return _possibleConstructorReturn(this, _getPrototypeOf(TheRouter).apply(this, arguments));
  }

  _createClass(TheRouter, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this = this;

      var _this$props = this.props,
          forceRefresh = _this$props.forceRefresh,
          history = _this$props.history;

      if (history) {
        this.unlisten = history.listen(function () {
          if (forceRefresh) {
            _this.forceUpdate();
          }
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      var history = this.props.history;

      if (history) {
        var historyChanged = prevProps.history && prevProps.history !== history;

        if (historyChanged) {
          throw new Error('[TheRouter] You cannot change <TheRouter history>');
        }

        this.unlisten = history.listen(function () {
          _this2.forceUpdate();
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unlisten && this.unlisten();
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var basename = props.basename,
          children = props.children,
          className = props.className,
          getUserConfirmation = props.getUserConfirmation,
          history = props.history,
          keyLength = props.keyLength;
      var Router = history ? AbstractRouter : BrowserRouter;
      return React.createElement(Router, {
        basename: basename,
        getUserConfirmation: getUserConfirmation,
        history: history,
        keyLength: keyLength
      }, React.createElement("div", _extends({}, htmlAttributesFor(props, {
        except: ['className']
      }), {
        className: c('the-router', className)
      }), children));
    }
  }], [{
    key: "Hash",
    value: function Hash(_ref) {
      var basename = _ref.basename,
          children = _ref.children,
          getUserConfirmation = _ref.getUserConfirmation,
          hashType = _ref.hashType;
      return React.createElement(HashRouter, {
        basename: basename,
        getUserConfirmation: getUserConfirmation,
        hashType: hashType
      }, React.createElement("div", {
        className: "the-router-hash"
      }, children));
    }
  }, {
    key: "Static",
    value: function Static(_ref2) {
      var basename = _ref2.basename,
          children = _ref2.children,
          context = _ref2.context,
          location = _ref2.location;
      return React.createElement(StaticRouter, {
        basename: basename,
        context: context,
        location: location
      }, React.createElement("div", {
        className: "the-router-static"
      }, children));
    }
  }]);

  return TheRouter;
}(React.Component);

TheRouter.propTypes = {};
TheRouter.defaultProps = {};
TheRouter.displayName = 'TheRouter';
export default TheRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZVJvdXRlci5qcyJdLCJuYW1lcyI6WyJjIiwiUHJvcFR5cGVzIiwiUmVhY3QiLCJCcm93c2VyUm91dGVyIiwiSGFzaFJvdXRlciIsIlJvdXRlciIsIkFic3RyYWN0Um91dGVyIiwiU3RhdGljUm91dGVyIiwiaHRtbEF0dHJpYnV0ZXNGb3IiLCJUaGVSb3V0ZXIiLCJwcm9wcyIsImZvcmNlUmVmcmVzaCIsImhpc3RvcnkiLCJ1bmxpc3RlbiIsImxpc3RlbiIsImZvcmNlVXBkYXRlIiwicHJldlByb3BzIiwiaGlzdG9yeUNoYW5nZWQiLCJFcnJvciIsImJhc2VuYW1lIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwia2V5TGVuZ3RoIiwiZXhjZXB0IiwiaGFzaFR5cGUiLCJjb250ZXh0IiwibG9jYXRpb24iLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUEsT0FBT0EsQ0FBUCxNQUFjLFlBQWQ7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQixPQUFsQjtBQUNBLFNBQ0VDLGFBREYsRUFFRUMsVUFGRixFQUdFQyxNQUFNLElBQUlDLGNBSFosRUFJRUMsWUFKRixRQUtPLGtCQUxQO0FBTUEsU0FBU0MsaUJBQVQsUUFBa0Msb0JBQWxDO0FBRUE7Ozs7SUFHTUMsUzs7Ozs7Ozs7Ozs7Ozt3Q0FpQmdCO0FBQUE7O0FBQUEsd0JBQ2dCLEtBQUtDLEtBRHJCO0FBQUEsVUFDVkMsWUFEVSxlQUNWQSxZQURVO0FBQUEsVUFDSUMsT0FESixlQUNJQSxPQURKOztBQUVsQixVQUFJQSxPQUFKLEVBQWE7QUFDWCxhQUFLQyxRQUFMLEdBQWdCRCxPQUFPLENBQUNFLE1BQVIsQ0FBZSxZQUFNO0FBQ25DLGNBQUlILFlBQUosRUFBa0I7QUFDaEIsWUFBQSxLQUFJLENBQUNJLFdBQUw7QUFDRDtBQUNG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d0IsV0FBeEI7QUFFQSxlQUFldEIsU0FBZiIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuaW1wb3J0IGMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7XG4gIEJyb3dzZXJSb3V0ZXIsXG4gIEhhc2hSb3V0ZXIsXG4gIFJvdXRlciBhcyBBYnN0cmFjdFJvdXRlcixcbiAgU3RhdGljUm91dGVyLFxufSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHsgaHRtbEF0dHJpYnV0ZXNGb3IgfSBmcm9tICd0aGUtY29tcG9uZW50LXV0aWwnXG5cbi8qKlxuICogUm91dGVyIG9mIHRoZS1jb21wb25lbnRzXG4gKi9cbmNsYXNzIFRoZVJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBIYXNoKHsgYmFzZW5hbWUsIGNoaWxkcmVuLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBoYXNoVHlwZSB9KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxIYXNoUm91dGVyIHsuLi57IGJhc2VuYW1lLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBoYXNoVHlwZSB9fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3RoZS1yb3V0ZXItaGFzaCc+e2NoaWxkcmVufTwvZGl2PlxuICAgICAgPC9IYXNoUm91dGVyPlxuICAgIClcbiAgfVxuXG4gIHN0YXRpYyBTdGF0aWMoeyBiYXNlbmFtZSwgY2hpbGRyZW4sIGNvbnRleHQsIGxvY2F0aW9uIH0pIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFN0YXRpY1JvdXRlciB7Li4ueyBiYXNlbmFtZSwgY29udGV4dCwgbG9jYXRpb24gfX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0aGUtcm91dGVyLXN0YXRpYyc+e2NoaWxkcmVufTwvZGl2PlxuICAgICAgPC9TdGF0aWNSb3V0ZXI+XG4gICAgKVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBmb3JjZVJlZnJlc2gsIGhpc3RvcnkgfSA9IHRoaXMucHJvcHNcbiAgICBpZiAoaGlzdG9yeSkge1xuICAgICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKCgpID0+IHtcbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHRoaXMucHJvcHNcblxuICAgIGlmIChoaXN0b3J5KSB7XG4gICAgICBjb25zdCBoaXN0b3J5Q2hhbmdlZCA9IHByZXZQcm9wcy5oaXN0b3J5ICYmIHByZXZQcm9wcy5oaXN0b3J5ICE9PSBoaXN0b3J5XG4gICAgICBpZiAoaGlzdG9yeUNoYW5nZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVGhlUm91dGVyXSBZb3UgY2Fubm90IGNoYW5nZSA8VGhlUm91dGVyIGhpc3Rvcnk+JylcbiAgICAgIH1cbiAgICAgIHRoaXMudW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuICYmIHRoaXMudW5saXN0ZW4oKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXNcbiAgICBjb25zdCB7XG4gICAgICBiYXNlbmFtZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGhpc3RvcnksXG4gICAgICBrZXlMZW5ndGgsXG4gICAgfSA9IHByb3BzXG5cbiAgICBjb25zdCBSb3V0ZXIgPSBoaXN0b3J5ID8gQWJzdHJhY3RSb3V0ZXIgOiBCcm93c2VyUm91dGVyXG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJcbiAgICAgICAgey4uLntcbiAgICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgICAgIGhpc3RvcnksXG4gICAgICAgICAga2V5TGVuZ3RoLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgey4uLmh0bWxBdHRyaWJ1dGVzRm9yKHByb3BzLCB7IGV4Y2VwdDogWydjbGFzc05hbWUnXSB9KX1cbiAgICAgICAgICBjbGFzc05hbWU9e2MoJ3RoZS1yb3V0ZXInLCBjbGFzc05hbWUpfVxuICAgICAgICA+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUm91dGVyPlxuICAgIClcbiAgfVxufVxuXG5UaGVSb3V0ZXIucHJvcFR5cGVzID0ge31cblxuVGhlUm91dGVyLmRlZmF1bHRQcm9wcyA9IHt9XG5cblRoZVJvdXRlci5kaXNwbGF5TmFtZSA9ICdUaGVSb3V0ZXInXG5cbmV4cG9ydCBkZWZhdWx0IFRoZVJvdXRlclxuIl19